void 0;
true;
1;
'Hello world';
'Hello,\nMy name is wisp!';
'a';
'keyword';
window.addEventListener('load', handler, false);
(foo || 0)['bar'];
[
    1,
    2,
    3,
    4
];
[
    1,
    2,
    3,
    4
];
({
    '1': 2,
    'foo': bar,
    'beep-bop': 'bop'
});
({
    a: 1,
    b: 2
});
foo(bar, baz);
dashDelimited();
isPredicate();
__privates__();
listToVector();
parseInt(x);
parseInt(x);
isArray(x);
isArray(x);
a + b;
a + b + c;
a - b;
a * b * c;
a / b;
a % b;
a === b;
isEqual(a, b);
isEqual(a, b, c);
a > b;
a >= b;
a < b && b < c;
a <= b && b <= c;
a && b;
a && b && c;
a || b;
(a || b) && (c && d);
var a = exports.a = void 0;
var b = exports.b = 2;
a = 1;
number < 10 ? 'Digit' : 'Number';
isMonday(today) ? 'How was your weekend' : void 0;
(function () {
    console.log('Computing sum of a & b');
    return a + b;
})();
(function () {
    return void 0;
})();
(function () {
    var aø1 = 1;
    var bø1 = aø1 + c;
    return aø1 + bø1;
}.call(this));
(function (x) {
    return x + 1;
});
(function increment(x) {
    return x + 1;
});
var incerement = exports.incerement = function incerement(x) {
        return x + 1;
    };
(function (x) {
    var rest = Array.prototype.slice.call(arguments, 1);
    return rest.reduce(function (sum, x) {
        return sum + x;
    }, x);
});
var sum = exports.sum = function sum() {
        switch (arguments.length) {
        case 0:
            return 0;
        case 1:
            var x = arguments[0];
            return x;
        case 2:
            var x = arguments[0];
            var y = arguments[1];
            return x + y;
        default:
            var x = arguments[0];
            var more = Array.prototype.slice.call(arguments, 1);
            return more.reduce(function (x, y) {
                return x + y;
            }, x);
        }
    };
(function () {
    switch (arguments.length) {
    case 1:
        var x = arguments[0];
        return x;
    case 2:
        var x = arguments[0];
        var y = arguments[1];
        return x - y;
    default:
        throw RangeError('Wrong number of arguments passed');
    }
});
new Type(options);
new Class(options);
console.log('hello wisp');
window.addEventListener('load', handler, false);
window.location;
(templates || 0)[element.id];
(function () {
    try {
        return raise(exception);
    } finally {
    }
})();
(function () {
    try {
        return raise(exception);
    } catch (error) {
        return console.log(error);
    }
})();
(function () {
    try {
        return raise(exception);
    } catch (error) {
        return recover(error);
    } finally {
        return console.log('That was a close one!');
    }
})();
(function raise(message) {
    return (function () {
        throw new Error(message);
    })();
});
foo;
symbol(void 0, 'foo');
symbol(void 0, 'foo');
symbol(void 0, 'foo');
'\ua789bar';
list(symbol(void 0, 'a'), symbol(void 0, 'b'));
var unlessFn = exports.unlessFn = function unlessFn(condition, body) {
        return condition ? void 0 : body;
    };
unlessFn(true, console.log('should not print'));
void 0;
true ? void 0 : console.log('should not print');
list.apply(void 0, [symbol(void 0, 'foo')].concat([bar]));
list.apply(void 0, [symbol(void 0, 'foo')].concat([bar], vec(bazs)));
list.apply(void 0, [symbol(void 0, 'foo')].concat([symbol(void 0, 'bar')]));
list.apply(void 0, [symbol(void 0, 'foo')].concat([bar]));
list.apply(void 0, [symbol(void 0, 'foo')].concat([bar], vec(bazs)));
void 0;
var print = exports.print = function (message) {
        return console.log(message);
    };
void 0;
reduce(map(filter(open(tagret, 'keypress'), isEnterKey), getInputText), render);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
